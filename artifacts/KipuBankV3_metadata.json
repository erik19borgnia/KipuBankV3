{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint128",
						"name": "_banckCap",
						"type": "uint128"
					},
					{
						"internalType": "address",
						"name": "_feed",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "DepositNotAllowed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ERC20DepositNotAllowed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ERC20ExtractionNotAllowed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ExtractionNotAllowed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "errorData",
						"type": "bytes"
					}
				],
				"name": "ExtractionReverted",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OracleCompromised",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "StalePrice",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract AggregatorV3Interface",
						"name": "oldFeed",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "contract AggregatorV3Interface",
						"name": "newFeed",
						"type": "address"
					}
				],
				"name": "ChainlinkFeedUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Deposited",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ERC20Deposited",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ERC20Extracted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Extracted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "depositERC20",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "depositEth",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user_",
						"type": "address"
					}
				],
				"name": "getBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user_",
						"type": "address"
					}
				],
				"name": "getBalanceInUSD",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBalanceInUSD",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDeposits",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "deposits_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user_",
						"type": "address"
					}
				],
				"name": "getDeposits",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "deposits_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					}
				],
				"name": "getERC20Balance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					}
				],
				"name": "getERC20Balance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					}
				],
				"name": "getERC20Deposits",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "deposits_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					}
				],
				"name": "getERC20Deposits",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "deposits_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					}
				],
				"name": "getERC20Withdrawals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "withdrawals_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					}
				],
				"name": "getERC20Withdrawals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "withdrawals_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user_",
						"type": "address"
					}
				],
				"name": "getWithdrawals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "withdrawals_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWithdrawals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "withdrawals_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_bankCap",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_feeds",
				"outputs": [
					{
						"internalType": "contract AggregatorV3Interface",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_withdrawLimit",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_feed",
						"type": "address"
					}
				],
				"name": "setFeeds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawERC20",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawEth",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "Erik Borgnia",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC-20 token failed."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"depositERC20(address,uint256)": {
					"params": {
						"_amount": "La cantidad a depositar de USDC",
						"_tokenAddress": "La dirección del contrato del token a depositar"
					}
				},
				"getBalance(address)": {
					"details": "Esta función garantiza que toda la información es auditable",
					"params": {
						"user_": "Usuario que se quiere auditar"
					}
				},
				"getBalanceInUSD(address)": {
					"details": "Esta función garantiza que toda la información es auditable",
					"params": {
						"user_": "Usuario que se quiere auditar"
					}
				},
				"getDeposits(address)": {
					"details": "Esta función garantiza que toda la información es auditable",
					"params": {
						"user_": "Usuario que se quiere auditar"
					}
				},
				"getERC20Balance(address)": {
					"params": {
						"_tokenAddress": "La dirección del contrato del token a consultar"
					}
				},
				"getERC20Balance(address,address)": {
					"details": "Esta función garantiza que toda la información es auditable",
					"params": {
						"_tokenAddress": "La dirección del contrato del token a consultar",
						"user_": "Usuario que se quiere auditar"
					}
				},
				"getERC20Deposits(address)": {
					"params": {
						"_tokenAddress": "La dirección del contrato del token a consultar"
					}
				},
				"getERC20Deposits(address,address)": {
					"details": "Esta función garantiza que toda la información es auditable",
					"params": {
						"_tokenAddress": "La dirección del contrato del token a consultar",
						"user_": "Usuario que se quiere auditar"
					}
				},
				"getERC20Withdrawals(address)": {
					"params": {
						"_tokenAddress": "La dirección del contrato del token a consultar"
					}
				},
				"getERC20Withdrawals(address,address)": {
					"details": "Esta función garantiza que toda la información es auditable",
					"params": {
						"_tokenAddress": "La dirección del contrato del token a consultar",
						"user_": "Usuario que se quiere auditar"
					}
				},
				"getWithdrawals(address)": {
					"details": "Esta función garantiza que toda la información es auditable",
					"params": {
						"user_": "Usuario que se quiere auditar"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setFeeds(address)": {
					"details": "Sólo puede ser llamada por el propietario",
					"params": {
						"_feed": "La nueva dirección del Price Feed"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"withdrawERC20(address,uint256)": {
					"details": "Sólo se puede depositar un valor mayor a 0, siempre que no se supere el bankCap",
					"params": {
						"_amount": "Cantidad que se quiere extraer. Debe ser <= al balance y al límite de extracción",
						"_tokenAddress": "La dirección del contrato del token a extraer"
					}
				},
				"withdrawEth(uint256)": {
					"details": "Sólo se puede depositar un valor mayor a 0, siempre que no se supere el bankCap",
					"params": {
						"_amount": "Cantidad que se quiere extraer. Debe ser <= al balance y al límite de extracción"
					}
				}
			},
			"title": "KipuBank V3",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"DepositNotAllowed(address,uint256)": [
					{
						"notice": "Error emitido cuando se intenta depositar una cantidad inválida (=0, o la cuenta superaría el bankCap)"
					}
				],
				"ERC20DepositNotAllowed(address,address,uint256)": [
					{
						"notice": "Error emitido cuando se intenta depositar una cantidad inválida de un token ERC20 (=0)"
					}
				],
				"ERC20ExtractionNotAllowed(address,address,uint256)": [
					{
						"notice": "Error emitido cuando se intenta extraer una cantidad inválda de un token ERC20 (<=0, >saldo)"
					}
				],
				"ExtractionNotAllowed(address,uint256)": [
					{
						"notice": "Error emitido cuando se intenta extraer una cantidad inválda (<=0, >saldo, >límite)"
					}
				],
				"ExtractionReverted(address,uint256,bytes)": [
					{
						"notice": "Error emitido cuando falla una extracción"
					}
				],
				"OracleCompromised()": [
					{
						"notice": "Error emitido cuando falla el oráculo"
					}
				],
				"StalePrice()": [
					{
						"notice": "Error emitido cuando la última actualización del oráculo supera el heartbeat"
					}
				]
			},
			"events": {
				"ChainlinkFeedUpdated(address,address)": {
					"notice": "Evento emitido al extraer USDC exitosamente"
				},
				"Deposited(address,uint256)": {
					"notice": "Evento emitido al depositar exitosamente"
				},
				"ERC20Deposited(address,address,uint256)": {
					"notice": "Evento emitido al depositar USDC exitosamente"
				},
				"ERC20Extracted(address,address,uint256)": {
					"notice": "Evento emitido al extraer USDC exitosamente"
				},
				"Extracted(address,uint256)": {
					"notice": "Evento emitido al extraer exitosamente"
				}
			},
			"kind": "user",
			"methods": {
				"depositERC20(address,uint256)": {
					"notice": "Función externa para recibir depósitos de tokens ERC20Emite un evento cuando la transacción es exitosa."
				},
				"depositEth()": {
					"notice": "Función para hacer un depósitoSólo se puede depositar un valor mayor a 0, siempre que no se supere el bankCap"
				},
				"getBalance()": {
					"notice": "Función pública para ver el balance de ETH que uno mismo tiene"
				},
				"getBalance(address)": {
					"notice": "Función onlyOwner para ver el balance de ETH que algún usuario tiene"
				},
				"getBalanceInUSD()": {
					"notice": "Función pública para ver el balance de ETH que uno mismo tiene en USD"
				},
				"getBalanceInUSD(address)": {
					"notice": "Función onlyOwner para ver el balance de ETH que algún usuario tiene en USD"
				},
				"getDeposits()": {
					"notice": "Función pública para ver la cantidad de depósitos de ETH que uno hizo"
				},
				"getDeposits(address)": {
					"notice": "Función onlyOwner para ver la cantidad de depósitos de ETH que algún usuario hizo"
				},
				"getERC20Balance(address)": {
					"notice": "Función pública para ver el balance que uno mismo tiene de un token ERC20 específico"
				},
				"getERC20Balance(address,address)": {
					"notice": "Función onlyOwner para ver el balance que algún usuario tiene en algún token ERC20"
				},
				"getERC20Deposits(address)": {
					"notice": "Función pública para ver la cantidad de depósitos que uno hizo de un token ERC20 específico"
				},
				"getERC20Deposits(address,address)": {
					"notice": "Función onlyOwner para ver la cantidad de depósitos que algún usuario hizo de algún token ERC20"
				},
				"getERC20Withdrawals(address)": {
					"notice": "Función pública para ver la cantidad de extracciones que uno hizo de un token ERC20 específico"
				},
				"getERC20Withdrawals(address,address)": {
					"notice": "Función onlyOwner para ver la cantidad de extracciones que algún usuario hizo de algún token ERC20"
				},
				"getWithdrawals()": {
					"notice": "Función pública para ver la cantidad de extracciones de ETH que uno hizo"
				},
				"getWithdrawals(address)": {
					"notice": "Función onlyOwner para ver la cantidad de extracciones de ETH que algún usuario hizo"
				},
				"s_bankCap()": {
					"notice": "Límite de balance por cuenta"
				},
				"s_feeds()": {
					"notice": "variable para almacenar la dirección del Chainlink Feed"
				},
				"s_withdrawLimit()": {
					"notice": "Límite de extracción por cuenta"
				},
				"setFeeds(address)": {
					"notice": "Función para actualizar el Chainlink Price Feed"
				},
				"withdrawERC20(address,uint256)": {
					"notice": "Función para hacer un depósito"
				},
				"withdrawEth(uint256)": {
					"notice": "Función para hacer un depósito"
				}
			},
			"notice": "Contrato para el TP Final del Módulo 4 del curso de EthKipuEs una simulación de banco con depósitos y extracciones, auditable por el dueño del contrato, que además incorpora USDC al que se hizo previamente",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/KipuBankV3.sol": "KipuBankV3"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
			"keccak256": "0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0",
			"license": "MIT",
			"urls": [
				"bzz-raw://6d39e11b1dc7b9b8ccdabbc9be442ab7cda4a81c748f57e316dcb1bcb4a28bf9",
				"dweb:/ipfs/QmaG6vz6W6iEUBsbHSBob5mdcitYxWjoygxREHpsJHfWrS"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC1363.sol": {
			"keccak256": "0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d",
			"license": "MIT",
			"urls": [
				"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100",
				"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC165.sol": {
			"keccak256": "0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc",
			"license": "MIT",
			"urls": [
				"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037",
				"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC20.sol": {
			"keccak256": "0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44",
			"license": "MIT",
			"urls": [
				"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d",
				"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2",
			"license": "MIT",
			"urls": [
				"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303",
				"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5",
			"license": "MIT",
			"urls": [
				"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508",
				"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c",
			"license": "MIT",
			"urls": [
				"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617",
				"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u"
			]
		},
		"contracts/KipuBankV3.sol": {
			"keccak256": "0xe9fbe26a3fccdbcab86d5c092a3f1772fb21e54129d6196701966df88d041ca0",
			"license": "MIT",
			"urls": [
				"bzz-raw://407c836cc06e0667956b4198d7abdafc3b3c5a2bfc785bf42f5704fbe6b885d0",
				"dweb:/ipfs/QmPpfjmBTLNC82L8N3ExRNsLjJANxKKqTRvGFs22Kq7tXH"
			]
		}
	},
	"version": 1
}